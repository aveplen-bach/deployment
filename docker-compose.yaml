version: '3.7'

x-minio-common:
  &minio-common
  image: quay.io/minio/minio:RELEASE.2022-05-26T05-48-41Z
  environment:
    - MINIO_ROOT_USER=AKIAIOSFODNN7EXAMPLE
    - MINIO_ROOT_PASSWORD=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
  command: server --console-address ":9001" http://minio{1...4}/data{1...2}
  expose:
    - "9000"
    - "9001"
  healthcheck:
    test:
      [
        "CMD",
        "curl",
        "-f",
        "http://localhost:9000/minio/health/live"
      ]
    interval: 30s
    timeout: 20s
    retries: 3
  networks:
    - bach

services:
  authentication-service:
    build:
      context: ../authentication-service
      dockerfile: Dockerfile
    environment:
      - GRPC_LISTEN_ADDR=:30031
      - HTTP_LISTEN_ADDR=:8081
      - SJWT_SECRET=mysecret
      - CONFIG_CLIENT_ADDR=config-service:30034
      - S3_CLIENT_ADDR=s3-gateway:30032
      - FACEREC_CLIENT_ADDR=face-recognition-service:30035
      - DBPORT=5432
      - DBHOST=authdb
      - DBNAME=authdb
      - DBUSER=authdb
      - DBPASSWORD=authdb
      - DEBUG=0
    ports:
      - "30031:30031"
      - "8081:8081"
    depends_on:
      s3-gateway:
        condition: service_healthy
      config-service:
        condition: service_healthy
      face-recognition-service:
        condition: service_healthy
      authdb:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-f",
          "http://localhost:8081/auth/health/live"
        ]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - bach

  s3-gateway:
    build:
      context: ../s3-grpc-gateway
      dockerfile: Dockerfile
    environment:
      - GRPC_LISTEN_ADRR=:30032
      - HTTP_LISTEN_ADRR=:8082
      - S3_ADDR=nginx:9000
      - S3_ACCESS_TOKEN=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
      - S3_ACCESS_KEY=AKIAIOSFODNN7EXAMPLE
      - S3_BUCKET_NAME=avebach
    ports:
      - "30032:30032"
      - "8082:8082"
    depends_on:
      nginx:
        condition: service_started
      minio1:
        condition: service_healthy
      minio2:
        condition: service_healthy
      minio3:
        condition: service_healthy
      minio4:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-f",
          "http://localhost:8082/s3g/health/live"
        ]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - bach

  config-gateway:
    build:
      context: ../config-gateway
      dockerfile: Dockerfile
    environment:
      - HTTP_LISTEN_ADDR=:8083
      - SJWT_SECRET=mysecret
      - AUTH_CLIENT_ADDR=authentication-service:30031
      - CONFIG_CLIENT_ADDR=config-service:30034
    ports:
      - "8083:8083"
    depends_on:
      config-service:
        condition: service_healthy
      authentication-service:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-f",
          "http://localhost:8083/cg/health/live"
        ]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - bach

  config-service:
    build:
      context: ../config-service
      dockerfile: Dockerfile
    environment:
      - GRPC_LISTEN_ADDR=:30034
      - DBPORT=5432
      - DBHOST=cfgdb
      - DBNAME=cfgdb
      - DBUSER=cfgdb
      - DBPASSWORD=cfgdb
    ports:
      - "30034:30034"
      - "8084:8084"
    depends_on:
      nginx:
        condition: service_started
      cfgdb:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-f",
          "http://localhost:8084/cs/health/live"
        ]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - bach

  face-recognition-service:
    build:
      context: ../face-recognition-service
      dockerfile: Dockerfile
    environment:
      - GRPC_LISTEN_ADDR=:30035
    ports:
      - "30035:30035"
      - "8085:8085"
    depends_on:
      s3-gateway:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-f",
          "http://localhost:8085/facerec/health/live"
        ]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - bach

  resource-service:
    build:
      context: ../resource-service
      dockerfile: Dockerfile
    environment:
      - HTTP_LISTEN_ADDR=:8086
      - SJWT_SECRET=mysecret
      - AUTH_CLIENT_ADDR=authentication-service:30031
    ports:
      - "8086:8086"
    depends_on:
      authentication-service:
        condition: service_healthy
    networks:
      - bach

  authdb:
    image: postgres:latest
    environment:
      POSTGRES_DB: "authdb"
      POSTGRES_USER: "authdb"
      POSTGRES_PASSWORD: "authdb"
    volumes:
      - authdb:/authdb
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U authdb -d authdb" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    ports:
      - "5432:5432"
    networks:
      - bach

  cfgdb:
    image: postgres:latest
    environment:
      POSTGRES_DB: "cfgdb"
      POSTGRES_USER: "cfgdb"
      POSTGRES_PASSWORD: "cfgdb"
    volumes:
      - cfgdb:/cfgdb
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U cfgdb -d cfgdb" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    ports:
      - "5433:5432"
    networks:
      - bach

  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
    ports:
      - "80:80"
    depends_on:
      authentication-service:
        condition: service_healthy
      config-gateway:
        condition: service_healthy
      resource-service:
        condition: service_started
    networks:
      - bach

  minio1:
    <<: *minio-common
    hostname: minio1
    volumes:
      - data1-1:/data1
      - data1-2:/data2

  minio2:
    <<: *minio-common
    hostname: minio2
    volumes:
      - data2-1:/data1
      - data2-2:/data2

  minio3:
    <<: *minio-common
    hostname: minio3
    volumes:
      - data3-1:/data1
      - data3-2:/data2

  minio4:
    <<: *minio-common
    hostname: minio4
    volumes:
      - data4-1:/data1
      - data4-2:/data2

  nginx:
    image: nginx:1.19.2-alpine
    hostname: nginx
    volumes:
      - ../s3-grpc-gateway/nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "9000:9000"
      - "9001:9001"
    depends_on:
      minio1:
        condition: service_healthy
      minio2:
        condition: service_healthy
      minio3:
        condition: service_healthy
      minio4:
        condition: service_healthy
    networks:
      - bach

volumes:
  data1-1:
  data1-2:
  data2-1:
  data2-2:
  data3-1:
  data3-2:
  data4-1:
  data4-2:
  authdb:
  cfgdb:


networks:
  bach:
    driver: bridge
